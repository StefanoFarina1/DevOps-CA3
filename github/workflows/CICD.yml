name: CI/CD Pipeline for MyJourneyToWork

on:
  push:
    branches:
      - master
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  build_and_analyze:
    name: Build, Test, and Analyze
    runs-on: windows-latest
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: "zulu"

      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0 # For better analysis relevancy

      - name: Cache SonarCloud Packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar

      - name: Cache SonarCloud Scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner

      - name: Install SonarCloud Scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        shell: powershell
        run: |
          $path = '.\.sonar\scanner'
          if (-Not (Test-Path -Path $path)) {
              New-Item -Path $path -ItemType Directory
          }
          dotnet tool update dotnet-sonarscanner --tool-path $path

      - name: Install Coverlet
        shell: powershell
        run: |
          dotnet tool install --global coverlet.console

      - name: Start SonarCloud Analysis
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner begin /MyJourneyToWork-DevOps" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.opencover.reportsPaths="**/coverage.xml"

      - name: Build Project
        shell: powershell
        run: |
          dotnet build --no-incremental

      - name: Run Unit and Acceptance Tests
        shell: powershell
        run: |
          dotnet test --no-build

      - name: Generate Coverage Report
        shell: powershell
        run: |
          coverlet .\MyJourneyToWorkTests\bin\Debug\net7.0\MyJourneyToWorkTests.dll --target "dotnet" --targetargs "test --no-build" -f opencover -o ".\MyJourneyToWorkTests\CodeCoverage\coverage.xml"

      - name: End SonarCloud Analysis
        shell: powershell
        run: |
          .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"

  build_for_deploy:
    runs-on: windows-latest
    needs: build_and_analyze
    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "7.x"
          include-prerelease: true

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{env.DOTNET_ROOT}}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v3
        with:
          name: .net-app
          path: ${{env.DOTNET_ROOT}}/myapp

  deploy_to_qa:
    runs-on: windows-latest
    needs: build_for_deploy
    environment:
      name: "QA"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: .net-app

      - name: Deploy to QA Environment
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: "MyJourneytowork-gus"
          slot-name: "QA"
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_QA }}
          package: .

  e2e_tests:
    needs: deploy_to_qa
    runs-on: windows-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: "7.x"
          include-prerelease: true

      - name: Install Playwright Dependencies
        run: |
          cd MyJourneyToWorkE2E
          dotnet add package Microsoft.Playwright
          dotnet build
          pwsh bin/Debug/net7.0/playwright.ps1 install

      - name: Run E2E Tests
        run: |
          cd MyJourneyToWorkE2E
          dotnet test -- NUnit.NumberOfTestWorkers=5

  k6_load_test:
    needs: deploy_to_qa
    name: k6 Load Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Run local k6 test
        uses: grafana/k6-action@v0.2.0
        with:
          filename: MyJourneyToWorkPerfTests/loadTest.js
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}

  k6_spike_test:
    needs: deploy_to_qa
    name: k6 Load Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Run local k6 test
        uses: grafana/k6-action@v0.2.0
        with:
          filename: MyJourneyToWorkPerfTests/spikeTest.js
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}

  k6_stress_test:
    needs: deploy_to_qa
    name: k6 Load Test
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Run local k6 test
        uses: grafana/k6-action@v0.2.0
        with:
          filename: MyJourneyToWorkPerfTests/stressTest.js
        env:
          GITHUB_WORKSPACE: ${{ github.workspace }}

  deploy_to_staging:
    runs-on: windows-latest
    needs: [e2e_tests, k6_load_test, k6_spike_test, k6_stress_test]
    environment:
      name: "Staging"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: .net-app

      - name: Deploy to QA Environment
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: "MyJourneytowork-gus"
          slot-name: "staging"
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_STAGING }}
          package: .

  deploy_to_production:
    runs-on: windows-latest
    needs: deploy_to_staging
    environment:
      name: "Production"
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v3
        with:
          name: .net-app

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: "MyJourneytowork-gus"
          slot-name: "Production"
          publish-profile: ${{ secrets.AZUREAPPSERVICE_PUBLISHPROFILE_3F6F4D93526F4C2A9EC48B6960D01538 }}
          package: .

  swap-to-green-slot:
    runs-on: ubuntu-latest
    environment: Production
    needs: deploy_to_production
    steps:
      - name: "Checkout GitHub Action"
        uses: actions/checkout@main

      - name: "Login via Azure CLI"
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: "Swap to green slot"
        uses: Azure/cli@v1
        with:
          inlineScript: |
            az webapp deployment slot swap --slot 'staging' --resource-group MyJourneyToWork --name MyJourneytowork-gus


